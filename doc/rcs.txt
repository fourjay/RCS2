*rcs*    wrapper around RCS leveraging vim where helpul

Help on using rcs                                                    *rcs*

1. Introduction                                                 | rcs-intro|
2. Commands                                                 | rcs-commands|
3. Configuration                                        | rcs-configuration|
4. Other                                                        | rcs-other|

==============================================================================
1. INTRODUCTION                                                  *rcs-intro*

This wraps RCS commands to vim commands. It leverages vim's strengths, in
particular diffs and commit messages, as well as speeding up the work cycle.

This is inspired (and built on) a venerable vim plugin:

https://www.vim.org/scripts/script.php?script_id=1111

But this version differs in significant ways. In particular:

* This version ditches GUI menu options
* The assumed workflow de-emphasize the lock unlock cycle. In light of 
  all the modern VCS systems, I'm reluctant to emphasize this aspect of
  rcs. Instead this plugin assumes that RCS will be primarily used as a 
  quick way for a single developer to quickly add version control without
  larger commitment a more modern VCS entails. It is optimized to continual
  incremental checkin and locking.
* This plugin uses modern file structure, assuming the install will be through
  a runtimepath manager. The original was written as a single script.
* sudo use is expected and encouraged. One of my driving use cases was bringing
  ad-hoc config changes under control.
==============================================================================
2. COMMANDS                                              *rcs-commands*



|'RCSco'|        rcs co --> Takes a r/w option

|'RCSci'|        rcs ci --> checks in the file. Opens a normal commit message 
                     split, which will be written.

|'RClog'|        rlog --> Opens a split with "live" rlog. Versions chunks can be
                     * diffed (d key) against the current version
                     * edited (<CR>) opens an editing buffer for the commit message

|'RCSsudo'|      sets buffer to use sudo for check-in. This is automatically set when 
                 using the :w! function of Tim Popes eunuch plugin or Christian
                 https://www.vim.org/scripts/script.php?script_id=1111

|'RCSdiff'|      rcsdiff --> apply diff split against most recent
                 checked in version

|'RCSwork'|      Automates a check-in check-out workcycle. 

|'RCSnostrict'|  rcs -U --> set "unstrict" locking in RCS on the current file

------------------------------------------------------------------------------
                                *'rcs-option1'*
*RCSciEvent*
User command called when ci is completed

Example: >
:autocmd User RCSciEvent call DoGutterMarksUpdate()
<

*RCSnewBufferEvent*
User command called when new commit message buffer is created.
Add custom behavior to commit message buffer

==============================================================================
3. OTHER                                                         *rcs-other*

The git archive still has tracking information, like ChangeLog info from the 
original plugin.

This fork is maintained by
Josef Fortier at https://github.com/fourjay/vim-rcs
