*rcs.txt*	Assist with editing RCS controlled files.
		Last Change: April 27, 2010
		Author: Christian J. Robinson

					*rcs.vim* *rcs*

This is a set of autocommands, commands, and a menu to help you handle RCS
controlled files.  It requires Vim 7.0 or later to run.

------------------------------------------------------------------------------

1. Introduction				|rcs-intro|
2. Commands				|rcs-commands|
3. Configuration Variables		|rcs-configuration|

==============================================================================
1. Introduction					*rcs-intro*

If you try to modify a readonly file that has a RCS/<file>,v counterpart you
will be asked if you want to check the file out for modification, and when
you unload the buffer you'll be prompted if you want to check the file back
in, and allowed to enter a log message.

The commands have corresponding menu items, which should be fairly
self-explanatory.

The log message uses a vim buffer. A write event will commit the
message. This follows CVS convention where lines beginning with
<
# RCS
>
will be deleted

==============================================================================
2. Commands					*rcs-commands*

						*:RCSdiff*
:RCSdiff
	View the differences between the working file and the last revision,
	using vimdiff.

						*:RCSlog*
:RCSlog
	Show the entire log file--syntax highlighted--in a split window.
	Individual log entries can be edited from this display.  And you can
	show the differences between two consecutive versions.

						*:RCSco*
:RCSco ro
	Check out the current file readonly (unlocked).

:RCSco w
        This is the default when no option is passed

	Check out the current file writable (locked).
	
	With either use of the ":RCSco" command, Vim will ask if you want to
	discard changes if you already have a locked/modifiable file


						*:RCSci*
:RCSci
	Check the current (changed) file in, you will be prompted for a log
	message, and the file will automatically be checked back out
	readonly.

						*:RCSwork*
:RCSWork
	Combine ci and co -l, to contine to "work" on a file. You will
        be prompted for checkin messge
	
						*:RCSsudo*
:RCSsudo
	Set the RCS commands to use sudo on a per buffer basis. This
        allows editing and versioning configuration files from a more
        full featured user account (in conjunction with one of the many
        su write tools such as SudoWrite).

						*:RCSnostrict*
:RCSnostrict
	Set non-strict locking
	
==============================================================================
3. Configuration Variables			*rcs-configuration*

*g:rcs_plugin_toplevel_menu*
The name of the menu to place the RCS menu into, if you don't want it at the
top level.

*g:rcs_plugin_menu_priority*
The menu priority to use for the RCS menu.

*g:rcs_plugin_menu_force*
Force loading of the menu in console Vim.

Examples: >
 :let g:rcs_plugin_toplevel_menu = '&Misc'
 :let g:rcs_plugin_menu_priority = '130.10'
 :let g:rcs_plugin_menu_force = 1
<

*RCSciEvent*
User command called when ci is completed

Example: >
:autocmd User RCSciEvent call DoGutterMarksUpdate()
<

*RCSnewBufferEvent*
User command called when new commit message buffer is created.
Add custom behavior to commit message buffer
